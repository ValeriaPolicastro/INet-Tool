% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ConsensusWeightedJaccard.R
\name{ConsensusAlgorithm}
\alias{ConsensusAlgorithm}
\title{ConsensusAlgorithm}
\usage{
ConsensusAlgorithm(
  adjMatL,
  tolerance = 0.1,
  theta = 0.04,
  ThresholdConsensus = 0.5,
  nitermax = 50,
  ncores = 2
)
}
\arguments{
\item{adjMatL}{list of weighted adjacency matrix with the SAME nodes in rows
and columns for all the matrices.}

\item{tolerance}{the tolerance of differences between similar graphs for the
construction of the Consensus (default 0.1).}

\item{theta}{importance to give to the neighbourhood part of the weight
(default 0.04).}

\item{ThresholdConsensus}{threshold for the construction of the Consensus
(default 0.5). Used in the last step on the similar graphs.}

\item{nitermax}{maximum number of iteration before stopping the algorithm
(default 50).}

\item{ncores}{number of CPU cores to use (default is 2). We suggest to use
ncores equal to the number of graphs to integrate.}
}
\value{
3 output:
- graphConsensus the Consensus Network
- Comparison the Jaccard Weighted Distances between the graphs
calculated in each iteration
- similarGraphs the similar graphs before the Thresholding
}
\description{
The function computes the INet Algorithm for the constuction of
a Consensus Network.
}
\examples{
gI <- igraph::sample_pa(n=10,directed=FALSE)
igraph::E(gI)$weight <- runif(igraph::ecount(gI),0.5,1)
gII <- igraph::sample_pa(n=10,directed=FALSE)
igraph::E(gII)$weight <- runif(igraph::ecount(gII),0.5,1)

MatI <- igraph::as_adjacency_matrix(graph= gI,attr = "weight")
MatII <- igraph::as_adjacency_matrix( graph= gII, attr = "weight")

my_AdjMatrices <- list(MatI,MatII)

ConsensusAlgorithm(adjMatL=my_AdjMatrices, tolerance=0.1,
theta=0.04, ThresholdConsensus=0.5, nitermax=50,ncores=2)
}
